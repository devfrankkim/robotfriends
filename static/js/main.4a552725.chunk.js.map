{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["SearchBox","searchChange","console","log","className","type","placeholder","onChange","Card","id","name","email","src","alt","CardList","props","robots","map","user","index","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","ReactDOM","render","document","getElementById"],"mappings":"yLAiBeA,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEhB,OADAC,QAAQC,IAAIF,GAER,qBAAKG,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAYN,OCIXO,MAbjB,YAAiC,IAAlBC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,MACrB,OACI,mCACI,sBAAKP,UAAU,mDAAf,UACI,gDACA,qBAAKQ,IAAG,+BAA0BH,EAA1B,aAAyCI,IAAI,WACrD,oCAAOH,EAAP,OACA,8BAAMC,UCmBPG,EAtBE,SAACC,GAEd,OADAb,QAAQC,IAAI,YAER,mCAEIY,EAAMC,OAAOC,KAAI,SAACC,EAAMC,GACpB,OACI,cAAC,EAAD,CAEIV,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,MAAQO,EAAKP,OAHRO,EAAKT,UCJnBW,EARA,SAACL,GACZ,OACI,qBAAKM,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACI,6BAAKT,EAAMU,cCHFC,E,kDAGjB,WAAYX,GAAO,IAAD,8BACd,cAAMA,IACDY,MAAQ,CACTC,UAAU,GAHA,E,8DAQAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAS,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,4DAGHG,KAAKhB,MAAMU,a,GApBeQ,aC8H3BC,E,kDA1EX,aAAc,IAAD,6BACThC,QAAQC,IAAI,gBACZ,gBA2BJgC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAcD,EAAME,OAAOC,SApB1C,EAAKZ,MAAO,CACRX,OAAS,GACTqB,YAAa,IAZR,E,gEAiBO,IAAD,OAEfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEhB,OAAS4B,OACxC1C,QAAQC,IAAI,c,+BAgBZD,QAAQC,IAAI,UADR,MAE0B4B,KAAKJ,MAA5BX,EAFH,EAEGA,OAAQqB,EAFX,EAEWA,YACTQ,EAAiB7B,EAAO8B,QAAO,SAAAC,GACjC,OAAOA,EAAMrC,KAAKsC,cAAcC,SAASZ,EAAYW,kBAI7D,OAAQhC,EAAOkC,OAEC,sBAAK9C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBAEA,cAAC,EAAD,CAAWH,aAAc8B,KAAKI,iBAc9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUnB,OAAQ6B,WApB1C,gD,GA/CUM,IAAMlB,W,MChDxBmB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4a552725.chunk.js","sourcesContent":["import React from 'react'\n\n//rfce\nconst SearchBox = ({searchChange}) => {\n    console.log(searchChange);\n    return (  \n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'                \n                type=\"search\" \n                placeholder=\"search robots\" \n                onChange = {searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox","import React from 'react';\n\nfunction Card({id, name ,email}){\n    return (\n        <>\n            <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n                <h1 >Robots Friends</h1>\n                <img src={`https://robohash.org/${id}}?200x200`} alt=\"robots\" ></img>                              \n                <div> {name} </div>    \n                <div>{email}</div>                          \n            </div>                                   \n        </>\n        );\n    }\n  \n  export default Card;\n  ","import React from 'react'\nimport Card from './Card'\n\n// props is an Object\n\n// functional component -> props (object) \nconst CardList = (props) => {            \n    console.log('CardList')\n    return (       \n        <>\n            {\n            props.robots.map((user, index) => {\n                return (\n                    <Card \n                        key={user.id} \n                        id={user.id} \n                        name={user.name} \n                        email ={user.email}\n                    />\n                )\n            })            \n            }\n        </>\n    )\n}\n\n\n\nexport default CardList","import React from 'react'\n\nconst Scroll = (props) => {    \n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '600px'}}>\n            <h1>{props.children}</h1>\n        </div>\n    )\n}\n\nexport default Scroll\n\n  ","import React, { Component } from 'react'\n\nexport default class ErrorBoundry extends Component {\n    // this is to allow access to this.props in the constructor\n    // (which we end up not needing)\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    \n    // try catch \n    componentDidCatch(error, info){\n        this.setState({ hasError:true })\n    }\n\n    render() {\n        if(this.state.hasError){\n            return <h1>Ooooops. That is not good.</h1>\n        } \n        return (             \n                this.props.children            \n        )\n    }\n}\n\n\n// render the children, whatever is inside the boundry.\n// otherwise, render <h1>Ooooops. That is not good.</h1>\n\n// how to change hasError?\n// componentDidCatch()","import React from 'react'\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry'\n\n/*\nthis.state ={\n    robots : robots,\n    searchfield: ''\n}\n 1) 2 states\n 2) \"App\"(Parent) owns the state, any components that has \"state\" uses the \"class\" syntax\n    SO they can use constructor(), to create \"this.state\"\n 3) \"state\" is what changes in an app.\n\n Virtual DOM is just a javascript Object. (Down Stream)\n ** The virtual DOM is just an Object that collects the entire \"state\" **\n ** and React uses the \"state\" to render and pass them down as props to the components**\n ** Pure functions can just render **\n\n **\n    Everytime, there's an onChange on the <searchBox/> component, \n    it lets the \"App\" know, 'hey, there was a change!!!'\n    Run the function \"onSearchChange\" with the event \n    and update the state of the \"searchfield\" to whatever we type.\n\n    ****Render()****\n\n    Now with the information that we have from <searchBox/>,\n    We can now communicate to the <CardList/>,\n\n    onSearchChange -> this.setState({searchfield : event.target.value})\n\n    \"\n        Hey, I want you to filter the 'this.state.robots' to \n        have only what includes in the 'this.state.searchfield' with new updates \n\n        Inside <CardList robots={filteredRobots}/> \n    \"\n\n    robots(original data) is not changing, does this need to be part of \"state\"?\n    -> Not right because we have hard coded datas\n    But most of the times, we usually get new datas from another place over the internet.\n    \n    ex) Empty array -> An array after we go and grab all of our datas(users, robots)\n    {robots: robots}\n **\n*/\n\n// smart components tend to have class syntax + \"state\"\n\n\nclass App extends React.Component {\n    constructor(){        \n        console.log('constructor')\n        super()\n        // Line 8:9:  'this' is not allowed before 'super()'  no-this-before-super\n        // in order to use 'this', we need to call super() which calls the constructor of React.Component\n        \n        // this.state is what describes our app.\n        // these are things that can change and affect our app.\n        // they usually live in the parent component that kinda passes \"state\" to different components\n\n        this.state ={\n            robots : [],\n            searchfield: ''\n        }\n    }\n\n    // This is part of React, Not using arrow functions here.\n    componentDidMount(){\n        // Grab data list \n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({ robots : users }))\n        console.log('didmount')\n    }     \n\n\n\n    // https://reactjs.org/docs/handling-events.html\n    // everytime input changes, DOM manipulation \n    onSearchChange = (event) => {\n        this.setState({searchfield : event.target.value})\n        // where is this event happening? -> <input>\n        // <input> doesn't have  -> this.state.robots\n        // Anytime you make your own method on a component, use arrow functions\n        // so that \"this\" value is according to where it was created, which is \"App\"                \n    }\n\n    render(){        \n        console.log('render')\n        const {robots, searchfield} = this.state\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n\n                                \n    return !robots.length ? \n        <h1>Loading...</h1> : \n                    <div className=\"tc\">\n                        <h1 className=\"f1\">Robofriends</h1>\n                        {/* You need to use 'this' because it's an Object which is \"App\" */}\n                        <SearchBox searchChange={this.onSearchChange}/>\n                        {/* <CardList robots={robots}/> can access from this.state*/}\n                        {/* state \"this.state.robots\" is now passed down as \"robots(props)\" so CardList accepts \"robots\" */}\n\n\n                        {/* \n                            <Scroll/> can use children \n                            even if I didn't pass props to Scroll, \n\n                            Automatically every signle component in React has the property \"children\"\n                            Using the \"props.children\", we can create Components that wrap other Components\n                            \n                            \"props.children\" can wrap other Components\n                        */}\n                        <Scroll>\n                            <ErrorBoundry>\n                                <CardList robots={filteredRobots}/>\n                            </ErrorBoundry>\n                        </Scroll>\n                    </div>                    \n    }\n\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App'\nimport 'tachyons';\n\nReactDOM.render(<App /> ,document.getElementById('root'));\n\n\n"],"sourceRoot":""}